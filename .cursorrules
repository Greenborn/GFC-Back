# Reglas de Cursor para GFC-Back

## Estructura del Proyecto
- Este proyecto contiene dos APIs: `php_api/` (Yii2) y `node_api/` (Node.js/Express)
- Mantener separación clara entre las dos APIs
- Documentación en `documentacion/`

## Convenciones de Código

### PHP (Yii2)
- Seguir las convenciones de Yii2 Framework
- Usar camelCase para métodos y variables
- Usar PascalCase para nombres de clases
- Mantener estructura MVC: controllers/, models/, views/
- Usar namespaces apropiados
- Documentar métodos públicos con PHPDoc

### Node.js/Express
- Seguir convenciones de Express.js
- Usar camelCase para variables y funciones
- Usar PascalCase para nombres de clases
- Mantener estructura: routes/, controllers/, migrations/
- Usar async/await en lugar de callbacks
- Documentar endpoints con comentarios JSDoc

## Base de Datos
- Usar Knex.js para migraciones en Node.js
- Usar Yii2 migrations para PHP
- Mantener consistencia en nombres de tablas y columnas
- Documentar cambios de esquema

## API y Endpoints
- Mantener consistencia en respuestas JSON
- Usar códigos de estado HTTP apropiados
- Implementar autenticación y autorización
- Validar datos de entrada
- Manejar errores de forma consistente

## Seguridad
- Validar todas las entradas de usuario
- Usar prepared statements para consultas SQL
- Implementar autenticación segura
- Proteger contra CSRF, XSS, y SQL injection
- Usar variables de entorno para configuraciones sensibles

## Testing
- Escribir tests para nuevas funcionalidades
- Mantener cobertura de código
- Usar Codeception para PHP
- Usar Jest/Mocha para Node.js

## Documentación

### Estructura de Documentación
- Documentación principal en directorio `documentacion/` en la raíz del proyecto
- Crear subdirectorios para cada subproyecto: `documentacion/{subproyecto}/`
- Mantener README.md en la raíz del proyecto
- Crear README.md específico en cada `documentacion/{subproyecto}/`

### Documentos Requeridos por Subproyecto
- **README.md**: Descripción general del subproyecto, propósito y estructura
- **arquitectura.md**: Diseño arquitectónico detallado del subproyecto
- **definicion_tecnica.md**: Especificación técnica exhaustiva y abstracta que permita reconstruir el proyecto en otra tecnología
- **endpoints.md**: Documentación completa de todos los endpoints (solo para APIs)

### Enlaces y Referencias
- Todos los documentos deben estar interconectados mediante enlaces
- Mantener navegación coherente entre documentos
- Usar referencias cruzadas cuando sea apropiado

### Estándares de Documentación
- Usar Markdown para todos los documentos
- Incluir diagramas cuando sea necesario (usar Mermaid o similar)
- Mantener ejemplos de código actualizados
- Documentar configuraciones de deployment
- Incluir guías de instalación y setup
- Documentar APIs con Postman collections
- Comentar código complejo con documentación inline

## Git y Versionado
- Usar commits descriptivos de hasta 255 caracteres
- Seguir convenciones de branching
- Mantener .gitignore actualizado
- No committear archivos sensibles

## Performance
- Optimizar consultas de base de datos
- Implementar caching cuando sea apropiado
- Minimizar dependencias innecesarias
- Monitorear rendimiento de APIs

## Deployment
- Usar Docker para containerización
- Configurar variables de entorno
- Implementar CI/CD
- Mantener backups de base de datos

## Comunicación
- Siempre responder en español
- Ser claro y específico en explicaciones
- Proporcionar ejemplos cuando sea útil
- Mantener consistencia en terminología técnica 